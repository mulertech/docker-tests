#!/usr/bin/env php
<?php

function getProjectDir(): string
{
    $projectDir = dirname(__DIR__);

    while (!file_exists($projectDir . '/composer.json')) {
        $projectDir = dirname($projectDir);
    }

    return $projectDir;
}

function getPhpVersion(): string
{
    $composer = file_get_contents(getProjectDir() . '/composer.json');
    preg_match('/"php": "(.+)"/', $composer, $matches);
    $php = $matches[1] ?? '';

    if ($php === '') {
        return '';
    }

    preg_match_all('/[\^>=~]+(\d\.\d*)/', $php, $matches);
    return $matches[1][1] ?? $matches[1][0] ?? '';
}

function dbNeeded(): string
{
    $composer = file_get_contents(getProjectDir() . '/composer.json');
    return str_contains($composer, 'ext-pdo');
}

function getContainerName(): string
{
    $phpVersion = getPhpVersion();
    return 'docker-' . basename(getProjectDir()) . '-' . ($phpVersion === '' ? 'latest' : $phpVersion);
}

function getProjectName(): string
{
    return str_replace('.', '-', getContainerName());
}

function getDbPort(): int
{
    // Generate a port between 10000-65000 based on container name hash
    $hash = md5(getContainerName());
    return 10000 + (hexdec(substr($hash, 0, 4)) % 55000);
}

function createComposeFile(): void
{
    $uid = getmyuid();
    $gid = getmygid();
    $phpVersion = getPhpVersion();
    $image = 'php:' . ($phpVersion === '' ? '' : $phpVersion . '-') . 'fpm-alpine';
    $containerName = getContainerName();

    $content = <<<EOF
services:
  php:
    build:
      context: .
      dockerfile: "./vendor/mulertech/docker-tests/Dockerfile"
      args:
        USER_ID: $uid
        GROUP_ID: $gid
        PHP_IMAGE: "$image"
    container_name: "$containerName"
    volumes:
      - "./:/var/www/html"
    environment:
      PHP_CS_FIXER_IGNORE_ENV: 1
EOF;

    if (dbNeeded()) {
        $dbPort = getDbPort();
        $content .= <<<EOF

      DATABASE_HOST: db
      DATABASE_PORT: "3306"
      DATABASE_PATH: "/db"
      DATABASE_SCHEME: "mysql"
      DATABASE_QUERY: "serverVersion=5.7"
      DATABASE_USER: "user"
      DATABASE_PASS: "password"
    links:
      - db
    networks:
      - default
  db:
    image: "mysql:8"
    environment:
      MYSQL_DATABASE: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "$dbPort:3306"
    networks:
      - default
EOF;
    }

    $write = file_put_contents(getProjectDir() . DIRECTORY_SEPARATOR . 'mt-compose.yml', $content);

    if ($write === false) {
        echo 'Failed to create mt-compose.yml file';
    }
}

function dockerComposeCommand(): string
{
    return 'docker compose -f ' . getProjectDir() . DIRECTORY_SEPARATOR . 'mt-compose.yml --project-name ' . getProjectName();
}

function dockerComposeUp(string $arg2): void
{
    createComposeFile();
    $command = dockerComposeCommand() . ' up';
    $command .= $arg2 === '-d' ? ' -d' : '';
    exec($command);
}

function dockerComposeDown(): void
{
    $command = dockerComposeCommand() . ' down';
    exec($command);
}

function isDockerUp(): bool
{
    return str_contains(exec('docker compose ls | grep ' . getProjectName()), getProjectName());
}

function test(string $options = ''): void
{
    $containerName = getContainerName();
    $dockerUp = isDockerUp();

    if (!$dockerUp) {
        dockerComposeUp('-d');
    }

    $cmd = 'docker exec -it ' . $containerName . ' ./vendor/bin/phpunit ' . $options;
    $output = shell_exec($cmd);
    echo $output;

    if (!$dockerUp) {
        dockerComposeDown();
    }
}

function phpStan(): void
{
    $containerName = getContainerName();
    $dockerUp = isDockerUp();

    if (!$dockerUp) {
        dockerComposeUp('-d');
    }

    $cmd = 'docker exec -it ' . $containerName . ' ./vendor/bin/phpstan analyse --memory-limit=1G';
    $output = shell_exec($cmd);
    echo $output;

    if (!$dockerUp) {
        dockerComposeDown();
    }
}

function phpCsFixer(): void
{
    $containerName = getContainerName();
    $dockerUp = isDockerUp();

    if (!$dockerUp) {
        dockerComposeUp('-d');
    }

    $cmd = 'docker exec -it ' . $containerName . ' ./vendor/bin/php-cs-fixer fix src';
    $output = shell_exec($cmd);
    echo $output;

    if (!$dockerUp) {
        dockerComposeDown();
    }
}

$arg1 = $_SERVER['argv'][1] ?? '';
$arg2 = $_SERVER['argv'][2] ?? '';

if ($arg1 === 'test-coverage') {
    test('--coverage-html ./.phpunit.cache/coverage');
}

if ($arg1 === 'test') {
    test();
}

if ($arg1 === 'up') {
    dockerComposeUp($arg2);
}

if ($arg1 === 'down') {
    dockerComposeDown();
}

if ($arg1 === 'phpstan') {
    phpStan();
}

if ($arg1 === 'cs-fixer') {
    phpCsFixer();
}

if ($arg1 === 'all') {
    phpCsFixer();
    test();
    phpStan();
}

if ($arg1 === 'ps') {
    $containerName = getContainerName();
    $dockerUp = isDockerUp();

    if (!$dockerUp) {
        dockerComposeUp('-d');
    }

    $cmd = dockerComposeCommand() . ' ps';
    var_dump($cmd);
    $output = shell_exec($cmd);
    echo $output;

    if (!$dockerUp) {
        dockerComposeDown();
    }
}

if ($arg1 === 'name') {
    echo getProjectName() . PHP_EOL;
}